#pragma once

#include <complex>
#include <memory>

#include "TH2.h"
#include "TH3.h"

#include "TEnergyDistributionDensity.h"

enum class TPartOfComplexNumber{Im, Re};

struct TAcousticPressureParams {
  ///own params
  TPartOfComplexNumber PartOfComplexNumber;
	fp Rd; fp Zd;									///detector coordinates, g/cm2
  fp w;													///cyclic frequency
	fp cs;												/////speed of sound in a medium, g/cm2/s
  ///TEnergyDensityDistribution delegate params
	fp E0;												///total energy of the hadronic cascade, eV
  TEDDParameterization Parameterization;
	fp TrCutThreshold;            ///transverse cutoff threshold, g/cm2
	fp LonCutThreshold;           ///longitudinal cutoff threshold, g/cm2
};

///Wrapper functor for the subintegral expression of the Kirchhoff integral depending on detector coordinates,
///sound speed, frequency (Fourier spectrum) and energy distribution density
class TFwWrapper {
private:
  TAcousticPressureParams Params;
  std::unique_ptr<TEnergyDensityDistribution> EDD;
public:
  TFwWrapper(const TAcousticPressureParams &params);
	virtual ~TFwWrapper(){}

  void SetParams(const TAcousticPressureParams &params);
	TAcousticPressureParams GetParams() const noexcept { return Params; }

  fp operator () (const fp phi, const fp r, const fp z) const;
  ///Root 		r = *arg;	z = *(arg + 1);	phi = *(arg + 2);
  Double_t operator () ( const Double_t * arg);

  TEnergyDensityDistribution * GetEDD() const noexcept;
};      //TFwWrapper


enum class TAPCalculationMethod { ROOT, ACORNE, ASKARYAN };

///Base class for calculating the acoustic pressure generated by the hadronic cascade
///with energy density distribution
class TAcousticPressure {
protected:
  std::unique_ptr<TFwWrapper> FwWrapper;
  fp LMax;
  fp EvaluateLMax();
public:
	TAcousticPressure() : LMax(0) {}
  virtual ~TAcousticPressure(){}

  ///Set experiment conditions
  virtual void SetConditions(const TAcousticPressureParams &conditions);

  ///Returns the linear coordinate of the maximum of the cascade
	virtual fp GetLMax() const noexcept { return LMax; }

  ///Акустический эффект (на данной частоте w) от ЯЭК в точке распложения детектора (Rd,Zd)
  virtual std::complex<fp> GetComplexPwValue (const fp &rd, const fp &zd, const fp &w) = 0;

  ///Ряд значений из N точек акустического эффекта (на данной частоте w) развития ЯЭК в точке распложения детектора (Rd,Zd)
  ///Спектр акустического импульса, ограниченный частотой fmax
  virtual void GetComplexPwSeries(	const fp &rd,
                                    const fp &zd,
																		fp &fmax,															///Hz
                                    size_t N,
																		std::vector<std::complex<fp>> &pwx,		///Комплексный спектр
																		std::vector<fp> &mpwx                 ///Модуль спектра
                                  );
	///Acoustic pressure depending on time
	virtual void GetPtSeries(	std::vector<std::complex<fp>> &pwx,
                            std::vector<fp> &pt,
														fp &fmax,																			///Hz
                            size_t N
                          );
};     //TAcousticPressure



///Monte Carlo method
/// S. Bevan, S. Danaher, J. Perkin, S. Ralph, C. Rhodes, L. Thompson, T. Sloan, D. Waters.
/// Simulation of Ultra High Energy Neutrino Interactions in Ice and Water.
/// Astroparticle Physics, Volume 28, Issue 3, p. 366-379. 2007. ELSEVIER.
/// DOI:10.1016/j.astropartphys.2007.08.001. arXiv:0704.1025.
class TMCICAP : public TAcousticPressure {
private:
  int NPoints;
public:
  TMCICAP(const int npoints = 300000);

  virtual std::complex<fp> GetComplexPwValue (const fp &rd, const fp &zd, const fp &w) override;

	virtual void GetComplexPwSeries(	const fp &rd,
																		const fp &zd,
																		fp &fmax,															///Hz
																		size_t N,
																		std::vector<std::complex<fp>> &pwx,		///Комплексный спектр
																		std::vector<fp> &mpwx									///Модуль спектра
																		) override {GetComplexPwSeries(rd, zd, fmax, N, pwx, mpwx, nullptr, nullptr);}

	virtual void GetComplexPwSeries(	const fp &rd,
																		const fp &zd,
																		fp &fmax,															///Hz
																		size_t N,
																		std::vector<std::complex<fp>> &pwx,		///Комплексный спектр
																		std::vector<fp> &mpwx,	              ///Модуль спектра
																		TH3D * edd3d,													///Debug options
																		TH2D * edd2d													///Debug options
																	);
};		//TMCICAP
